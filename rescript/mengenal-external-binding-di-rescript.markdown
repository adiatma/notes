---
layout: default
title:  Mengenal external binding di ReScript
date:   2021-03-25
parent: rescript
---

# External (Bind to any JS library)

- @bs.val, @bs.scope (bind to global JS values)
- @bs.module (bind to JS imported/exported values)
- @bs.send (bind to JS methods)

## Examples

@bs.val

```rescript
@bs.val @bs.scope("Math") external random: unit => float = "random";

let math_random = random();
```

Output in JS.

```javascript
// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var math_random = Math.random();

exports.math_random = math_random;
/* math_random Not a pure module */
```
---

```javascript
// ./People.js
var People = {
  name: "Adiatma",
  getName() {
    return `Hello ${this.name}`
  }
}

module.exports = People
```

Bind JS file to ReScript.

```rescript
// ./People.res

type people;
type getName;

@bs.module external people: people = "./People"
@bs.send external getName: people => getName = "getName"

people->getName->Js.log;
// or
Js.log(people->getName)
```

Output in JS.

```javascript
// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var People = require("./People");

var people = People;

console.log(people.getName());

exports.people = people;
/* people Not a pure module */
```

---

Next, deep dive with @bs.module, @bs.scope, and @bs.send

```javascript
// ./Box.js

let Box = {
  size: {
    x: 10,
    y: 10,
    getAllSize() {
      return `(${this.x}, ${this.y})`
    }
  }
}

module.exports = {
  Box
}
```

Bind JS file to ReScript.

```rescript
// ./Box.res

type getAllSize;
type size = {
  x: int,
  y: int,
  getAllSize: getAllSize 
};

@bs.module("./Box") @bs.scope("Box") external size: size = "size";
@bs.send external getAllSize: size => getAllSize = "getAllSize";

Js.log(size->getAllSize)
```

Output in JS.

```javascript
// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Box = require("./Box");

var size = Box.Box.size;

console.log(size.getAllSize());

exports.size = size;
/* size Not a pure module */
```

